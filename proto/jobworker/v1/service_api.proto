syntax = "proto3";

package jobworker.v1;

option go_package = "github.com/tjper/teleport/proto/jobworker/v1";

// JobWorkerService provides methods that allow clients to start and interact
// with arbitrary commands running on the service's host.
service JobWorkerService {
  rpc Start(StartRequest) returns (StartResponse){}
  rpc Stop(StopRequest) returns (StopResponse){}
  rpc Status(StatusRequest) returns (StatusResponse){}
  rpc Output(OutputRequest) returns (stream OutputResponse){}
}

// StartRequest specifies job details for JobWorkerService.Start.
message StartRequest {
  // command is the arbitrary command to execute on JobWorkerService's host.
  string command  = 1;
  // limits are the resource limits to enforce on the job.
  Limits limits   = 2;
}

// StartResponse informs clients started job details.
message StartResponse {
  string job_id  = 1;
  // command is the arbitrary command that has been executed.
  string command = 2;
  // status is the human-readable current status of the job.
  string status  = 3;
  // limits are the resource limits being enforced on the job.
  Limits limits  = 4;
}

// StopRequest specifies a job ID to stop for JobWorkerService.Stop.
message StopRequest {
  string job_id = 1;
}

// StopResponse is a placeholder. This will maintain backwards compatibility
// in the event response details exist in the future.
message StopResponse {}

// StatusRequest specifies a job ID to perform a status check on for
// JobworkerService.Status.
message StatusRequest {
  string job_id = 1;
}

// StatusResponse informs clients the status of a job.
message StatusResponse {
  // status is the current job state.
  string status = 1;
}

// OutputRequest specifies job and process details for JobWorkerService.Output.
message OutputRequest {
  string job_id = 1;
}

// OutputResponse informs clients the output of a job. OutputResponse is part
// of a rpc stream; job output will be received over multiple responses.
message OutputResponse {
  // output is the job output.
  bytes output = 1;
}

// Limits details resource limits. A value of 0 means undefined for all field.
message Limits {
  // memory is the maximum amount of memory the job will use in bytes.
  uint64 memory           = 1;
  // cpus is the maximum number of CPUs the job will use.
  float  cpus             = 2;
  // disk_write_bps is the maximum number of bps (bytes per second) that may
  // be written to disk.
  uint64 disk_write_bps = 3;
  // desk_read_bps is the maximum number of bps (bytes per second) that may
  // be read form disk.
  uint64 disk_read_bps  = 4;
}
